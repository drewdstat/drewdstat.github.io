{
  "hash": "44b7e728878732736c2f7c69cf3abd11",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to use the wqspt package\"\nauthor: \"Drew Day, James Peng\"\ndate: \"5/26/2022\"\nexecute:\n  freeze: auto\ncategories:\n  - wqspt\n---\n\n\n\n\n\n# Introduction \n\nWeighted quantile sum (WQS) regression is a statistical technique to evaluate the \neffect of complex exposure mixtures on an outcome ([Carrico 2015](https://link.springer.com/article/10.1007/s13253-014-0180-3)). It is a \nsingle-index method which estimates a combined mixture sum effect as well as weights \ndetermining each individual mixture component's contributions to the sum effect. \nHowever, the model features a statistical power and Type I error (i.e., false positive) \nrate tradeoff, as there is a machine learning step to determine the weights that \noptimize the linear model fit. If the full data is used to estimate both the mixture \ncomponent weights and the regression coefficients, there is high power but also a \nhigh false positive rate since coefficient p-values are calculated for a weighted \nmixture independent variable with weights that have already been optimized to find \na large effect. \n\nWe recently proposed alternative methods based on a permutation test that should \nreliably allow for both high power and low false positive rate when utilizing WQS\nregression. The permutation test is a method of obtaining a p-value by simulating \nthe null distribution through permutations of the data. The permutation test \nalgorithm is described more in detail and validated in [Day et al. 2022](https://ehp.niehs.nih.gov/doi/10.1289/EHP10570). \nThe version of this permutation test used for a continuous outcome \nvariable has been applied in [Loftus et al. 2021](https://www.sciencedirect.com/science/article/pii/S0160412021000337), \n[Day et al. 2021](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9291724/), \n[Wallace et al. 2022](https://www.sciencedirect.com/science/article/pii/S0160412021006644), \n[Barrett et al. 2022](https://www.sciencedirect.com/science/article/pii/S0160412022000034),\nand [Freije et al. 2022](https://www.sciencedirect.com/science/article/pii/S0160412022001726).\nAnother version of the permutation test adapted for WQS logistic regression with a binary outcome\nvariable is applied in [Loftus et al. 2022](https://www.sciencedirect.com/science/article/pii/S0160412022004214).\n\n## About WQS \n\nThe goal of WQS regression is to determine whether an exposure mixture is associated \nwith an outcome in a prespecified direction. It fits the following model: \n\n$Y = \\beta_0 + \\beta_1(\\sum_{i=1}^{m} w_i {X_q}_i) + Z'\\gamma$   \n\nWhere $Y$ is the outcome variable, $\\beta_0$ is the intercept, $\\beta_1$ is the \ncoefficient for the weighted quantile sum, $\\sum_{i=1}^{c} w_i {X_q}_i$ is the \nweighted index for the set of quantiled mixture exposures, $Z$ is the set of \ncovariates, and $\\gamma$ is the regression coefficients for the covariates. \n\nA full description of the WQS methodology is described in [Carrico 2015](https://link.springer.com/article/10.1007/s13253-014-0180-3). \n\n## Permutation Test \n\nThe WQS regression comprises two steps, for which we typically split the data \ninto a training and validation set. Doing this reduces statistical power since \nwe are training our model on only part of the data. On the other hand, if we skip this \ntraining/test split, we can get a skewed representation of uncertainty for the WQS \ncoefficient. A permutation test method gives us a p-value for the \nuncertainty while also allowing us to use the full dataset for training and \nvalidation. This p-value is based on comparing a test value (e.g., coefficient or \nnaive p-values) to iterated values, and so the minimum non-zero p-value that can \nbe detected by the permutation test would be 1 divided by the number of permutation \ntest iterations. For example, if we run 200 iterations, we’d be able to define a \np-value of as low as 1/200 = 0.005, and any lower p-value would appear as zero \nand be interpreted as <0.005.\n\n### Continuous outcome algorithm (linear regression)\n\n1. Run WQS regression without splitting the data, obtaining a WQS coefficient \nestimate. \n\n2. Regress the outcome on all covariates but not the WQS variable. Then obtain the \npredicted outcome values and their residuals from this regression. \n\n3. Randomly permute the residual values and add them to the predicted outcome \nvalues to get a new outcome variable $y*$. \n\n4. Run a WQS regression without splitting the data in which $y*$ replaces the vector of \nobserved outcome variables, obtaining an estimate for the WQS coefficient $\\beta_1^*$. \n\n5. Repeat steps 3 and 4. \n\n6. Calculate the p-value by taking the proportion of $\\beta_1^*$ values greater than \nthe WQS coefficient estimate obtained in Step 1. \n\n### Binary or Count outcome algorithms (Generalized linear models (GLMs))\n\n1. \tRegress each of the $m$ mixture components on all covariates $Z$ and obtain a $n$\nobservations x $m$ matrix with columns being the residuals from each of the $m$ \nmodels ($R_{m|Z}$).\n\n2. \tObtain the initial fit ($fit1$) by running a “non-split” WQS logistic regression \n(or other WQS GLM) in which the binary (or count) outcome variable $Y$ is regressed \non the WQS vector and the covariates, and the mixture matrix used to calculate the \nWQS vector is the matrix of residuals from Step 1, $R_{m|Z}$. \n\n3. \tObtain the reduced fit ($fit2$) by running a logistic regression (or other GLM) \nregressing $Y$ on $Z$. \n\n4. Calculate the test p-value ($p_t$) as $1-pchisq(d(fit1)-d(fit2),1)$ where d \nis the deviance for a given model and $pchisq(x,1)$ is the probability density \nfunction of the chi-square distribution in which the input $x$ is the difference \nbetween the deviances of $fit1$ and $fit2$ and there is 1 degree of freedom. \n\n5. Permute the rows of the $R_{m|Z}$ residual matrix from Step 1 and repeat \nStep 2 to get a series of null fit1 models ($fit1^*$) for K iterations. \nObtain a distribution of permuted p-values ($p^*$) using the following formula: \n$p^*=1-pchisq(fit1^*)-d(fit2),1$).\n\n6. \tObtain the number of permuted $p^*$ less than or equal to the test $p_t$ from \nStep 4 and divide that by the number of iterations K to calculate the permutation\ntest p-value.\n\nNote that the above algorithm has been validated in WQS logistic regressions but\nnot yet for other forms of WQS GLMs (e.g., WQS Poisson regression). However, since \ndeviances can also be derived from those models, the algorithm should work for \nthose other WQS GLMs as well.\n\n# How to use the `wqspt` package \n\nThe `wqspt` package builds from the `gWQS` package.\n\nThe two main functions of the `wqspt` package are `wqs_pt` and `wqs_full_perm`. \n\n## `wqs_pt`\n\n### Arguments \n\n`wqs_pt` uses a `gwqs` object (from the `gWQS` [package](https://CRAN.R-project.org/package=gWQS)) as an input. To use \n`wqs_pt`, we first need to run an initial *permutation test reference WQS regression*\nrun while setting `validation = 0`. Note that permutation test can \ncurrently take in `gwqs` inputs with the following families: \n`family = gaussian(link = \"identity\")`, `family = binomial()` with any accepted link\nfunction (e.g., \"logit\" or \"probit\"), `family = poisson(link = \"log\")`, \n`family = quasipoisson(link = \"log\")`, and `family = \"negbin\"` for negative binomial. \nIt is not currently able to accommodate multinomial WQS regression, stratified \nweights, or WQS interaction terms. \n\nWe will use this `gwqs` object as the `model` argument for the `wqs_pt` \nfunction and set the following additional parameters: \n\n* `boots`: Number of bootstraps for the WQS regression run in each permutation test iteration. \nNote that we may elect a bootstrap count `boots` lower than that specified in the \n`model` object for the sake of efficiency. If we do, `wqs_pt` will run the\niterated WQS regressions for the permutation test with the number of bootstraps defined in \n`boots`. If `boots` is not specified, then the function will use the same bootstrap count \nin the permutation test iterated WQS regressions as that specified in the main WQS regression.\n* `niter`: Number of permutation test iterations. \n* `b1_pos`: A logical value that indicates whether beta values should be positive \nor negative.\n* `rs`: A logical value indicating whether the random subset implementation for WQS \nshould be performed ([Curtin 2019](https://www.tandfonline.com/doi/abs/10.1080/03610918.2019.1577971?journalCode=lssp20))\n* `plan_strategy`: Evaluation strategy for the plan function (\"sequential\", \n\"transparent\", \"multisession\", \"multicore\", \"multiprocess\", \"cluster\",\nor \"remote\"). See the documentation for the future::plan function for full details.  \n* `seed`: Random seed for the permutation test WQS reference run\n\nThe arguments `b1_pos` and `rs` should be consistent with the inputs chosen in \nthe `model` object. The `seed` should ideally be consistent with the seed set \nin the `model` object, though this is not required. \n\n### Outputs \n\nThe permutation test returns an object of class `wqs_pt`, which contains three \nsublists: \n\n* **perm_test**\n  * **pval**: permutation test p-value\n  * *Linear WQS regression only*\n  * **testbeta**: reference WQS coefficient $\\beta_1$ value \n  * **betas**: a vector of $\\beta_1$ values from each iteration of the permutation \ntest\n  * *WQS GLM only*\n  * **testpval**: test reference p-value\n  * **permpvals**: p-values from each iteration of the permutation test \n* **gwqs_main**: main gWQS object (same as `model` input)\n* **gwqs_perm**: permutation test reference gWQS object (NULL if model \n`family != \"gaussian\"` or if same number of bootstraps are used in permutation \ntest WQS regression runs as in the main run.)\n\n### Plotting method\n\nThe `wqs_pt` class has a `wqspt_plot` method to help visualize and summarize WQS \npermutation test results. Plots include (1) a forest plot of the beta WQS coefficient \nwith the naive confidence intervals as well as the permutation test p-value and\n(2) a heatmap of the WQS weights for each mixture component. \n\n## `wqs_full_perm` \n\nThe second function `wqs_full_perm` is a full wrapper which implements the initial \nWQS regression run using gWQS::gwqs and the permutation test in one function call. \n\nTo use `wqs_full_perm`, you must specify the same required arguments as needed in \nthe `gwqs` call. This function can run WQS regressions and the permutation test \nfor the following families: `family = gaussian(link = \"identity\")`, \n`family = binomial()` with any accepted link function (e.g., \"logit\" or \"probit\"), \n`family = poisson(link = \"log\")`, `family = quasipoisson(link = \"log\")`, \nand `family = \"negbin\"` for negative binomial. `wqs_full_perm `is not currently \nable to accommodate multinomial WQS regression, stratified weights, or WQS \ninteraction terms.\n\nFor the bootstrap count `b` argument, you must specify `b_main`,the number of \nbootstraps for the *main WQS regression* run, as well as `b_perm`, the number of \nbootstraps for the *permutation test reference WQS regression* run (linear WQS\nregression only) and each WQS regression iteration of the permutation test. As \nwith before, you can choose to set `b_main` $>$ `b_perm` for the sake of efficiency. \nFinally, you should indicate the number of desired permutation test runs `niter`.\n\nSince the WQS permutation test can be computationally intensive, you can specify \n`stop_if_nonsig = TRUE` if you do not wish for the permutation test to proceed \nif the naive main WQS regression run produces an nonsignificant result (if the p-value \nis below the `stop_thresh` argument, for which the default is 0.05). \nSee *Recommendations for Use* section below.\n\nThe `wqs_full_perm` returns an object of class `wqs_pt`, with outputs described \nabove. \n\n## Recommendations for Use \n\nLarger bootstrap counts and numbers of iterations lead to better estimates, though\nit is unclear how many iterations or bootstraps are needed for a stable estimate. We \ngenerally recommend using 1000 bootstraps on the main WQS regression and then \nperforming 200 iterations of 200-boostrap WQS regressions for the permutation test.\nHowever, this takes a substantial amount of computational time, and one could also\nget relatively stable p-values for instance for 100 iterations of 100-boostrap WQS\nregressions for the permutation test.\n\nWe recommend that users only apply the permutation test in cases where the naive \nWQS test approaches significance or near-significance. If the naive test produces \na non-significant result, then there likely is no reason to run the permutation \ntest, as it will produce a result which is more conservative than the naive \nmethod (i.e., it will have a larger p-value). This is the strategy that we have \napplied in our published papers \n([Loftus et al. 2021](https://www.sciencedirect.com/science/article/pii/S0160412021000337) and \n[Day et al. 2021](https://www.sciencedirect.com/science/article/pii/S0160412020322856)). \n\n# Examples \n\n## Example 1 (using `wqs_pt`)\n\nThis is an example where the WQS permutation test confirms a significant naive \nresult.\n\nWe first load both the wqspt and gWQS packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gWQS)\nlibrary(wqspt)\n```\n:::\n\n\n\nThen we produce a simulated dataset with the following parameters: \n\n* WQS coefficient $\\beta_1$: 0.2 \n* Mixture weights: 0.15 for first 5 components, 0.05 for remaining 5 components \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# simulated dataset\nsim_res1 <- wqs_sim(nmix = 10,\n                    ncovrt = 10,\n                    nobs = 1000,\n                    ntruewts = 10, \n                    ntruecovrt = 5, \n                    truewqsbeta = 0.2, \n                    truebeta0 = 2, \n                    truewts = c(0.15, 0.15, 0.15, 0.15, 0.15,\n                                0.05, 0.05, 0.05, 0.05, 0.05), \n                    q = 10, \n                    seed = 16)\n\nsim_data1 <- sim_res1$Data\n\nwqs_form <- formula(paste0(\"y ~ wqs + \", paste(paste0(\"C\",1:10), collapse=\"+\")))\n```\n:::\n\n\n\nNow we run WQS regression on the simulated data.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mixture names\nmix_names1 <- colnames(sim_data1)[2:11]\n\n# create reference wqs object\nwqs_main1 <- gwqs(wqs_form, mix_name = mix_names1, data = sim_data1, q = 10, validation = 0,\n                  b = 20, b1_pos = T, plan_strategy = \"multicore\", family = \"gaussian\", \n                  seed = 16)\n```\n:::\n\n\n\nFinally, we can perform a permutation test on the WQS object. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# run permutation test\nperm_test_res1 <- wqs_pt(wqs_main1, niter = 50, boots = 5, b1_pos = T, seed = 16)\n```\n:::\n\n\n\nNote that the naive WQS regression produces a significant result for the \nWQS coefficient (p-value < 0.001).\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_sum1 <- summary(perm_test_res1$gwqs_main)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_sum1$coefficients\n#>                 Estimate Std. Error     t value      Pr(>|t|)\n#> (Intercept)  1.716588215 0.13195745  13.0086490  7.960621e-36\n#> wqs          0.271247707 0.02846484   9.5292204  1.183377e-20\n#> C1           0.915972918 0.03235401  28.3109569 1.372658e-129\n#> C2           1.837398541 0.03166084  58.0337820 1.460458e-320\n#> C3          -1.567906582 0.03096844 -50.6291836 9.835375e-277\n#> C4          -0.261844308 0.03025602  -8.6542893  1.987022e-17\n#> C5          -0.350600283 0.03111404 -11.2682323  8.594271e-28\n#> C6           0.017181769 0.03214707   0.5344739  5.931340e-01\n#> C7           0.028020482 0.03007333   0.9317386  3.516993e-01\n#> C8           0.006594393 0.03040937   0.2168540  8.283669e-01\n#> C9          -0.075174923 0.03029635  -2.4813194  1.325512e-02\n#> C10         -0.003960226 0.03079737  -0.1285898  8.977084e-01\n```\n:::\n\n\n\nThe permutation test confirms the significance of this result. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperm_test_res1$perm_test$pval\n#> [1] 0\n```\n:::\n\n\n\nHere are the summary plots: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwqspt_plot(perm_test_res1)$FullPlot\n#> Warning in get_plot_component(plot, \"guide-box\"): Multiple components found;\n#> returning the first one. To return all, use `return_all = TRUE`.\n```\n\n::: {.cell-output-display}\n![](wqspt_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n## Example 2 (using `wqs_pt`)\n\nThis is an example where the WQS permutation test goes against a (false positive) \nsignificant naive result. \n\nWe produce a simulated dataset with the following parameters: \n\n* WQS coefficient $\\beta_1$: 0\n* Mixture weights: 0.15 for first 5 components, 0.05 for remaining 5 components \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_res2 <- wqs_sim(nmix = 10,\n                    ncovrt = 10,\n                    nobs = 1000,\n                    ntruewts = 10, \n                    ntruecovrt = 5, \n                    truewqsbeta = 0, \n                    truebeta0 = 0.1, \n                    truewts = c(0.15, 0.15, 0.15, 0.15, 0.15,\n                                0.05, 0.05, 0.05, 0.05, 0.05), \n                    q = 10, \n                    seed = 16)\n\nsim_data2 <- sim_res2$Data\n```\n:::\n\n\n\nNow we run WQS regression as well as the permutation test on the simulated data.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mixture names\nmix_names2 <- colnames(sim_data2)[2:11]\n\n# create reference wqs object\nwqs_main2 <- gwqs(wqs_form, mix_name = mix_names2, data = sim_data2, q = 10, validation = 0,\n                  b = 20, b1_pos = T, plan_strategy = \"multicore\", family = \"gaussian\", \n                  seed = 16)\n\n# run permutation test\nperm_test_res2 <- wqs_pt(wqs_main2, niter = 50, boots = 5, b1_pos = T, seed = 16)\n```\n:::\n\n\n\nNote that the naive WQS regression produces a significant result for the \nWQS coefficient (p-value = 0.002).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_sum2 <- summary(perm_test_res2$gwqs_main)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_sum2$coefficients\n#>                 Estimate Std. Error     t value      Pr(>|t|)\n#> (Intercept) -0.242259146 0.12595439  -1.9233879  5.471846e-02\n#> wqs          0.084337304 0.02709982   3.1120982  1.910997e-03\n#> C1           0.916079837 0.03236572  28.3040164 1.530151e-129\n#> C2           1.836539134 0.03166066  58.0069707 2.079028e-320\n#> C3          -1.568725043 0.03099602 -50.6105377 1.279103e-276\n#> C4          -0.260464045 0.03027002  -8.6046855  2.973949e-17\n#> C5          -0.350431787 0.03114219 -11.2526386  1.005351e-27\n#> C6           0.016352846 0.03216484   0.5084075  6.112811e-01\n#> C7           0.027852144 0.03008416   0.9258077  3.547720e-01\n#> C8           0.006968031 0.03042095   0.2290537  8.188746e-01\n#> C9          -0.074755354 0.03031780  -2.4657251  1.384261e-02\n#> C10         -0.003661685 0.03081250  -0.1188377  9.054281e-01\n```\n:::\n\n\n\nThe permutation test, however, repudiates the significance of these plots (p = 0.12).  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperm_test_res2$perm_test$pval\n#> [1] 0.12\n```\n:::\n\n\n\nHere are the summary plots: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwqspt_plot(perm_test_res2)$FullPlot\n#> Warning in get_plot_component(plot, \"guide-box\"): Multiple components found;\n#> returning the first one. To return all, use `return_all = TRUE`.\n```\n\n::: {.cell-output-display}\n![](wqspt_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## Example 3 (using `wqs_full_perm`)\n\nUsing the same data as in Example 1, we run the WQS regression with permutation\ntest using the full wrapper `wqs_full_perm` call.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperm_test_res3 <- wqs_full_perm(wqs_form,\n                               data = sim_data1,\n                               mix_name = mix_names1,\n                               q = 10,\n                               b_main = 20,\n                               b_perm = 5,\n                               b1_pos = T,\n                               niter = 50,\n                               seed = 16,\n                               plan_strategy = \"multicore\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwqspt_plot(perm_test_res3)$FullPlot\n#> Warning in get_plot_component(plot, \"guide-box\"): Multiple components found;\n#> returning the first one. To return all, use `return_all = TRUE`.\n```\n\n::: {.cell-output-display}\n![](wqspt_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## Example 4 (using `wqs_full_perm` on binary outcome example)\n\nThis is an example in which we apply the logistic regression version of the WQS \npermutation test. \n\nWe produce a simulated dataset with the following parameters: \n\n* WQS coefficient $\\beta_1$: 0.4\n* Mixture weights: 0.15 for first 5 components, 0.05 for remaining 5 components \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_res3 <- wqs_sim(nmix = 10,\n                    ncovrt = 10,\n                    nobs = 1000,\n                    ntruewts = 10, \n                    ntruecovrt = 5, \n                    truewqsbeta = 0.4, \n                    truebeta0 = -2.5, \n                    truewts = c(0.15, 0.15, 0.15, 0.15, 0.15,\n                                0.05, 0.05, 0.05, 0.05, 0.05), \n                    q = 10, \n                    family = \"binomial\",\n                    seed = 16)\n\nsim_data3 <- sim_res3$Data\n\nperm_test_res4 <- wqs_full_perm(wqs_form,\n                               data = sim_data3,\n                               mix_name = mix_names1,\n                               q = 10,\n                               b_main = 20,\n                               b_perm = 5,\n                               b1_pos = T,\n                               niter = 50,\n                               seed = 16,\n                               plan_strategy = \"multicore\",\n                               family = \"binomial\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwqspt_plot(perm_test_res4)$FullPlot\n#> Warning in get_plot_component(plot, \"guide-box\"): Multiple components found;\n#> returning the first one. To return all, use `return_all = TRUE`.\n```\n\n::: {.cell-output-display}\n![](wqspt_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n# References\n* Barrett, E. S., Corsetti, M., Day, D., Thurston, S. W., Loftus, C. T., Karr, C. J., ...\n& Sathyanarayana, S. (2022). Prenatal phthalate exposure in relation to placental \ncorticotropin releasing hormone (pCRH) in the CANDLE cohort. Environment International, \n160, 107078.\n\n* Carrico, C., Gennings, C., Wheeler, D. C., & Factor-Litvak, P. (2015). Characterization \nof weighted quantile sum regression for highly correlated data in a risk analysis \nsetting. Journal of Agricultural, Biological, and Environmental Statistics, 20(1), \n100-120.\n\n* Curtin, P., Kellogg, J., Cech, N., & Gennings, C. (2019). A random subset implementation \nof weighted quantile sum (WQSRS) regression for analysis of high-dimensional mixtures. \nCommunications in Statistics-Simulation and Computation, 50(4), 1119-1134.\n\n* Day, D. B., Collett, B. R., Barrett, E. S., Bush, N. R., Swan, S. H., Nguyen, R. H., \n... & Sathyanarayana, S. (2021). Phthalate mixtures in pregnancy, autistic traits, \nand adverse childhood behavioral outcomes. Environment International, 147, 106330.\n\n* Day, D. B., Sathyanarayana, S., LeWinn, K. Z., Karr, C. J., Mason, W. A., & Szpiro, A. \nA. (2022). A permutation test-based approach to strengthening inference on the effects of \nenvironmental mixtures: comparison between single index analytic methods. Environmental \nHealth Perspectives, 130(8). \n\n* Freije, S. L., Enquobahrie, D. A., Day, D. B., Loftus, C., Szpiro, A. A., Karr, C. J.,\n... & Sathyanarayana, S. (2022). Prenatal exposure to polycyclic aromatic hydrocarbons and\ngestational age at birth. Environment International, 164, 107246.\n\n* Loftus, C. T., Bush, N. R., Day, D. B., Ni, Y., Tylavsky, F. A., Karr, C. J., ... & \nLeWinn, K. Z. (2021). Exposure to prenatal phthalate mixtures and neurodevelopment \nin the Conditions Affecting Neurocognitive Development and Learning in Early \nchildhood (CANDLE) study. Environment International, 150, 106409.\n\n* Loftus, C., Szpiro, A. A., Workman, T., Wallace, E. R., Hazlehurst, M. F., Day, D. B.,\n... & Karr, C. J. (2022). Maternal exposure to urinary polycyclic aromatic hydrocarbons \n(PAH) in pregnancy and childhood asthma in a pooled multi-cohort study. Environment \nInternational, 170, p.107494.\n\n* Renzetti, S., Curtin, P., Just, A. C., Bello, G., & Gennings, C. (2021). \n‘gWQS: Generalized Weighted Quantile Sum Regression’. https://CRAN.R-project.org/package=gWQS.\n\n* Wallace, E. R., Ni, Y., Loftus, C. T., Sullivan, A., Masterson, E., Szpiro, A., ... & \nSathyanarayana, S. (2022). Prenatal urinary metabolites of polycyclic aromatic hydrocarbons\nand toddler cognition, language, and behavior. Environment International, 159, 107039.\n",
    "supporting": [
      "wqspt_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}